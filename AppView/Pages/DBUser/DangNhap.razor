@page "/login"
@inject IUserServices userServices
@inject IRoleServices roleServices
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
<div class="card">
    <h4 class="card-header">Login</h4>
    <div class="card-body">
        <EditForm Model="@users" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Username</label>
                <InputText @bind-Value="users.Email" class="form-control" />
                <ValidationMessage For="@(() => users.Email)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="users.MatKhau" type="password" class="form-control" />
                <ValidationMessage For="@(() => users.MatKhau)" />
            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Login
            </button>
            <NavLink href="/register" class="btn btn-link">Register</NavLink>
        </EditForm>
    </div>
</div>

@code {
    private User users = new User();
    private bool loading;

    private async void OnValidSubmit()
    {

        loading = true;
        var iduser = await userServices.GetByLogin(users.Email, users.MatKhau);
        if (iduser != null)
        {
            var role = await roleServices.GetByID(iduser.IdRole);
            Extension.idUser = iduser.Id;
            Extension.Role = role.Ten;
            Extension.TenUser = iduser.Ten;
            NavigationManager.NavigateTo("/");
            StateHasChanged();
        }
        else
        {
            loading = false;
            await JSRuntime.InvokeVoidAsync("alert", "đăng nhập thất bại");
            StateHasChanged();
        }
    }
}